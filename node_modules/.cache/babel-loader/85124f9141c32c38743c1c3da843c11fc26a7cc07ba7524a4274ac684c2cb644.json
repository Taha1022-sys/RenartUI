{"ast":null,"code":"import axios from'axios';import{mockProducts}from'../data/mockData';const api=axios.create({baseURL:process.env.REACT_APP_API_URL||'https://localhost:7071/api',timeout:15000,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Add request interceptor for debugging\napi.interceptors.request.use(config=>{var _config$method;console.log(\"\\uD83D\\uDD04 API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url));return config;},error=>{console.error('❌ API Request Error:',error);return Promise.reject(error);});// Add response interceptor for debugging and error handling\napi.interceptors.response.use(response=>{console.log(\"\\u2705 API Response: \".concat(response.status,\" \").concat(response.config.url));return response;},error=>{var _error$response;console.error('❌ API Response Error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,error.message);if(error.code==='ERR_NETWORK'){console.log('🔄 Network error detected, falling back to mock data');}return Promise.reject(error);});const applyFilters=(products,filters)=>{return products.filter(product=>{if(filters.minPrice&&product.price<parseFloat(filters.minPrice))return false;if(filters.maxPrice&&product.price>parseFloat(filters.maxPrice))return false;if(filters.minPopularity&&(product.rating||product.popularity)<parseFloat(filters.minPopularity))return false;return true;});};const shouldUseMockData=()=>{return process.env.REACT_APP_USE_MOCK_DATA==='true';};export const productService={getAllProducts:async()=>{if(shouldUseMockData()){console.log('📋 Using mock data (environment configured)');return mockProducts;}try{var _response$data;const response=await api.get('/products');console.log('📦 Received products from API:',((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.length)||0,'items');return response.data||[];}catch(error){console.warn('⚠️ API unavailable, falling back to mock data:',error.message);return mockProducts;}},getProductsByFilters:async filters=>{if(shouldUseMockData()){console.log('📋 Using filtered mock data (environment configured)');return applyFilters(mockProducts,filters);}try{var _response$data2;const params=new URLSearchParams();if(filters.minPrice)params.append('minPrice',filters.minPrice);if(filters.maxPrice)params.append('maxPrice',filters.maxPrice);if(filters.minPopularity)params.append('minPopularity',filters.minPopularity);const queryString=params.toString();const url=queryString?\"/products?\".concat(queryString):'/products';console.log('🔍 Fetching filtered products with params:',Object.fromEntries(params));const response=await api.get(url);console.log('📦 Received filtered products from API:',((_response$data2=response.data)===null||_response$data2===void 0?void 0:_response$data2.length)||0,'items');return response.data||[];}catch(error){console.warn('⚠️ API filter request failed, using mock data with filters:',error.message);return applyFilters(mockProducts,filters);}},// Test API connection\ntestConnection:async()=>{try{const response=await api.get('/products');return{success:true,status:response.status,data:response.data,message:'API connection successful'};}catch(error){var _error$response2;return{success:false,status:((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)||'Network Error',error:error.message,message:'API connection failed'};}}};export{api};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}