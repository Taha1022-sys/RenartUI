{"ast":null,"code":"// Utility functions for API testing and data validation\nexport const validateProductStructure=product=>{const required=['id','name','price'];const recommended=['rating','images','colors'];const errors=[];const warnings=[];// Check required fields\nrequired.forEach(field=>{if(!product.hasOwnProperty(field)||product[field]===null||product[field]===undefined){errors.push(\"Missing required field: \".concat(field));}});// Check recommended fields\nrecommended.forEach(field=>{if(!product.hasOwnProperty(field)){warnings.push(\"Missing recommended field: \".concat(field));}});// Validate specific field types\nif(product.price&&typeof product.price!=='number'){errors.push('Price should be a number');}if(product.rating&&(typeof product.rating!=='number'||product.rating<0||product.rating>5)){warnings.push('Rating should be a number between 0 and 5');}if(product.images&&!Array.isArray(product.images)){warnings.push('Images should be an array');}if(product.colors&&!Array.isArray(product.colors)){warnings.push('Colors should be an array');}return{isValid:errors.length===0,errors,warnings};};export const validateProductsArray=products=>{if(!Array.isArray(products)){return{isValid:false,errors:['Response should be an array of products'],warnings:[],productValidations:[]};}const productValidations=products.map((product,index)=>({index,product,validation:validateProductStructure(product)}));const allErrors=productValidations.flatMap(pv=>pv.validation.errors.map(error=>\"Product \".concat(pv.index,\": \").concat(error)));const allWarnings=productValidations.flatMap(pv=>pv.validation.warnings.map(warning=>\"Product \".concat(pv.index,\": \").concat(warning)));return{isValid:allErrors.length===0,errors:allErrors,warnings:allWarnings,productValidations,summary:{total:products.length,valid:productValidations.filter(pv=>pv.validation.isValid).length,withWarnings:productValidations.filter(pv=>pv.validation.warnings.length>0).length}};};export const formatApiTestResults=testResult=>{if(!testResult)return'No test results available';const{success,status,data,error,message}=testResult;if(!success){return\"\\u274C Connection Failed (\".concat(status,\"): \").concat(error||message);}if(!data){return\"\\u2705 Connected (\".concat(status,\") but no data received\");}const validation=validateProductsArray(data);let result=\"\\u2705 Connected (\".concat(status,\") - \").concat(validation.summary.total,\" products found\\n\");if(validation.summary.valid===validation.summary.total){result+=\"\\u2705 All products have valid structure\";}else{result+=\"\\u26A0\\uFE0F \".concat(validation.summary.valid,\"/\").concat(validation.summary.total,\" products have valid structure\");}if(validation.warnings.length>0){result+=\"\\n\\u26A0\\uFE0F \".concat(validation.warnings.length,\" warnings found\");}if(validation.errors.length>0){result+=\"\\n\\u274C \".concat(validation.errors.length,\" errors found\");}return result;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}